(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", './global'], factory);
    }
})(function (require, exports) {
    "use strict";
    var global_1 = require('./global');
    exports.cache = Object.create(null);
    exports.testFunctions = Object.create(null);
    /**
     * Conditional loading of AMD modules based on a has feature test value.
     *
     * @param resourceId Gives the resolved module id to load.
     * @param require The loader require function with respect to the module that contained the plugin resource in it's dependency list.
     * @param load Callback to loader that consumes result of plugin demand.
     */
    function load(resourceId, require, load, config) {
        if (resourceId) {
            require([resourceId], load);
        }
        else {
            load();
        }
    }
    exports.load = load;
    /**
     * Resolves resourceId into a module id based on possibly-nested tenary expression that branches on has feature test value(s).
     *
     * @param resourceId The id of the module
     * @param normalize Resolves a relative module id into an absolute module id
     */
    function normalize(resourceId, normalize) {
        var tokens = resourceId.match(/[\?:]|[^:\?]*/g);
        var i = 0;
        function get(skip) {
            var term = tokens[i++];
            if (term === ':') {
                // empty string module name, resolves to null
                return null;
            }
            else {
                // postfixed with a ? means it is a feature to branch on, the term is the name of the feature
                if (tokens[i++] === '?') {
                    if (!skip && has(term)) {
                        // matched the feature, get the first value from the options
                        return get();
                    }
                    else {
                        // did not match, get the second value, passing over the first
                        get(true);
                        return get(skip);
                    }
                }
                // a module
                return term;
            }
        }
        resourceId = get();
        return resourceId && normalize(resourceId);
    }
    exports.normalize = normalize;
    /**
     * Check if a feature has already been registered
     *
     * @param feature the name of the feature
     * @return if the feature has been registered
     */
    function exists(feature) {
        return feature in exports.cache || feature in exports.testFunctions;
    }
    exports.exists = exists;
    /**
     * Register a new test for a named feature.
     *
     * @example
     * has.add('dom-addeventlistener', !!document.addEventListener);
     *
     * @example
     * has.add('touch-events', function () {
     *    return 'ontouchstart' in document
     * });
     *
     * @param feature the name of the feature
     * @param value the value reported of the feature, or a function that will be executed once on first test
     * @param overwrite if an existing value should be overwritten. Defaults to false.
     * @return if the feature test was successfully added
     */
    function add(feature, value, overwrite) {
        if (overwrite === void 0) { overwrite = false; }
        if (exists(feature) && !overwrite) {
            return false;
        }
        if (typeof value === 'function') {
            exports.testFunctions[feature] = value;
        }
        else {
            exports.cache[feature] = value;
            // Ensure we don't have stale tests sitting around that could overwrite a cache value being set
            delete exports.testFunctions[feature];
        }
        return true;
    }
    exports.add = add;
    /**
     * Return the current value of a named feature.
     *
     * @param feature The name (if a string) or identifier (if an integer) of the feature to test.
     * @return The value of a given feature test
     */
    function has(feature) {
        var result;
        if (exports.testFunctions[feature]) {
            result = exports.cache[feature] = exports.testFunctions[feature].call(null);
            exports.testFunctions[feature] = null;
        }
        else {
            result = exports.cache[feature];
        }
        return result;
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = has;
    /*
     * OOTB feature tests
     */
    add('host-browser', typeof document !== 'undefined' && typeof location !== 'undefined');
    add('host-node', function () {
        if (typeof process === 'object' && process.versions && process.versions.node) {
            return process.versions.node;
        }
    });
    add('float32array', 'Float32Array' in global_1.default);
    add('setimmediate', typeof global_1.default.setImmediate !== 'undefined');
    add('dom-mutationobserver', function () {
        return has('host-browser') && Boolean(global_1.default.MutationObserver || global_1.default.WebKitMutationObserver);
    });
    add('microtasks', function () {
        return has('promise') || has('host-node') || has('dom-mutationobserver');
    });
    add('object-assign', typeof Object.assign === 'function');
    add('object-observe', typeof Object.observe === 'function');
    add('postmessage', typeof postMessage === 'function');
    add('promise', typeof global_1.default.Promise !== 'undefined');
    add('raf', typeof requestAnimationFrame === 'function');
    add('weakmap', function () {
        if (typeof global_1.default.WeakMap !== 'undefined') {
            var key1 = {};
            var key2 = {};
            var map = new global_1.default.WeakMap([[key1, 1]]);
            return map.get(key1) === 1 && map.set(key2, 2) === map;
        }
        return false;
    });
    add('arraybuffer', typeof global_1.default.ArrayBuffer !== 'undefined');
    add('formdata', typeof global_1.default.FormData !== 'undefined');
    add('xhr', typeof global_1.default.XMLHttpRequest !== 'undefined');
    add('xhr2', has('xhr') && 'responseType' in global_1.default.XMLHttpRequest.prototype);
    add('xhr2-blob', function () {
        if (!has('xhr2')) {
            return false;
        }
        var request = new XMLHttpRequest();
        request.open('GET', '/', true);
        request.responseType = 'blob';
        request.abort();
        return request.responseType === 'blob';
    });
    add('es6-symbol', typeof global_1.default.Symbol === 'function');
    add('es6-set', function () {
        if (typeof global_1.default.Set === 'function') {
            /* IE11 and older versions of Safari are missing critical ES6 Set functionality */
            var set = new global_1.default.Set([1]);
            return set.has(1) && 'keys' in set && typeof set.keys === 'function';
        }
        return false;
    });
});
//# sourceMappingURL=data:application/json;base64,
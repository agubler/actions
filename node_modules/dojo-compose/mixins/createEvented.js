(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", 'dojo-core/aspect', 'dojo-core/WeakMap', '../compose', './createDestroyable'], factory);
    }
})(function (require, exports) {
    "use strict";
    var aspect_1 = require('dojo-core/aspect');
    var WeakMap_1 = require('dojo-core/WeakMap');
    var compose_1 = require('../compose');
    var createDestroyable_1 = require('./createDestroyable');
    /**
     * A weak map that contains a map of the listeners for an `Evented`
     */
    var listenersMap = new WeakMap_1.default();
    /**
     * A guard which determines if the value is `Actionable`
     *
     * @param value The value to guard against
     */
    function isActionable(value) {
        return Boolean(value && 'do' in value && typeof value.do === 'function');
    }
    /**
     * An internal function that always returns an EventedCallback
     * @param listener Either a `EventedCallback` or an `Actionable`
     */
    function resolveListener(listener) {
        return isActionable(listener) ? function (event) {
            listener.do({ event: event });
        } : listener;
    }
    /**
     * Creates a new instance of an `Evented`
     */
    var createEvented = compose_1.default({
        emit: function (event) {
            var method = listenersMap.get(this)[event.type];
            if (method) {
                method.call(this, event);
            }
        },
        on: function (type, listener) {
            return aspect_1.on(listenersMap.get(this), type, resolveListener(listener));
        }
    })
        .mixin({
        mixin: createDestroyable_1.default,
        initialize: function (instance, options) {
            /* Initialise listener map */
            listenersMap.set(instance, {});
            if (options && 'listeners' in options) {
                for (var eventType in options.listeners) {
                    instance.own(instance.on(eventType, options.listeners[eventType]));
                }
            }
        }
    });
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = createEvented;
});
//# sourceMappingURL=../_debug/mixins/createEvented.js.map
(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", 'dojo-core/Promise', 'dojo-core/WeakMap', '../compose'], factory);
    }
})(function (require, exports) {
    "use strict";
    var Promise_1 = require('dojo-core/Promise');
    var WeakMap_1 = require('dojo-core/WeakMap');
    var compose_1 = require('../compose');
    /**
     * A reference to a function that always returns a promise which resolves to false
     */
    var noop = function () {
        return Promise_1.default.resolve(false);
    };
    /**
     * A reference to a function that throws, used to replace the `own()` method after
     * destruction
     */
    var destroyed = function () {
        throw new Error('Call made to destroyed method');
    };
    /**
     * A weak map for *owning* handles on instances
     */
    var handlesWeakMap = new WeakMap_1.default();
    /**
     * A type guard that determines if the value is a Destroyable
     * @param value The value to guard for
     */
    function isDestroyable(value) {
        return Boolean(value && 'destroy' in value && typeof value.destroy === 'function');
    }
    exports.isDestroyable = isDestroyable;
    /**
     * A mixin which adds the concepts of being able to *destroy* handles which the instance
     * *owns*
     */
    var createDestroyable = compose_1.default({
        own: function (handle) {
            var handles = handlesWeakMap.get(this);
            handles.push(handle);
            return {
                destroy: function () {
                    handles.splice(handles.indexOf(handle));
                    handle.destroy();
                }
            };
        },
        destroy: function () {
            var _this = this;
            return new Promise_1.default(function (resolve) {
                var destroyable = _this;
                handlesWeakMap.get(destroyable).forEach(function (handle) {
                    handle && handle.destroy && handle.destroy();
                });
                handlesWeakMap.delete(destroyable);
                destroyable.destroy = noop;
                destroyable.own = destroyed;
                resolve(true);
            });
        }
    }, function (instance) {
        handlesWeakMap.set(instance, []);
    });
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = createDestroyable;
});
//# sourceMappingURL=../_debug/mixins/createDestroyable.js.map